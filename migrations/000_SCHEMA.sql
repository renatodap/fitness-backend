-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.activities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  source text NOT NULL CHECK (source = ANY (ARRAY['garmin'::text, 'manual'::text, 'quick_entry'::text, 'apple'::text, 'fitbit'::text, 'polar'::text, 'suunto'::text, 'wahoo'::text])),
  external_id text,
  name text NOT NULL,
  activity_type text NOT NULL,
  sport_type text,
  start_date timestamp with time zone NOT NULL,
  end_date timestamp with time zone,
  timezone text,
  utc_offset integer,
  elapsed_time_seconds integer NOT NULL,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  total_elevation_gain numeric,
  total_elevation_loss numeric,
  elevation_high numeric,
  elevation_low numeric,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  heartrate_zones jsonb,
  average_power numeric,
  max_power integer,
  normalized_power numeric,
  intensity_factor numeric,
  tss numeric,
  power_zones jsonb,
  kilojoules numeric,
  average_cadence numeric,
  max_cadence integer,
  average_stride_length numeric,
  average_vertical_oscillation numeric,
  average_ground_contact_time integer,
  average_ground_contact_balance numeric,
  average_vertical_ratio numeric,
  pool_length numeric,
  total_strokes integer,
  average_stroke_rate numeric,
  average_swolf numeric,
  lap_count integer,
  total_reps integer,
  total_sets integer,
  total_weight_lifted_kg numeric,
  exercise_count integer,
  muscle_groups ARRAY,
  total_shots integer,
  forehand_count integer,
  backhand_count integer,
  serve_count integer,
  volley_count integer,
  winner_count integer,
  unforced_error_count integer,
  ace_count integer,
  double_fault_count integer,
  first_serve_percentage numeric,
  points_won_percentage numeric,
  match_duration_minutes integer,
  sets_played integer,
  games_played integer,
  average_distance_per_stroke numeric,
  average_split_time integer,
  poses_held integer,
  average_hold_duration integer,
  flexibility_score integer,
  calories integer,
  active_calories integer,
  training_load numeric,
  aerobic_training_effect numeric,
  anaerobic_training_effect numeric,
  recovery_time_hours integer,
  vo2max_estimate numeric,
  fitness_level integer,
  perceived_exertion integer CHECK (perceived_exertion >= 1 AND perceived_exertion <= 10),
  mood text CHECK (mood = ANY (ARRAY['terrible'::text, 'bad'::text, 'okay'::text, 'good'::text, 'amazing'::text])),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 5),
  soreness_level integer CHECK (soreness_level >= 0 AND soreness_level <= 10),
  stress_level integer CHECK (stress_level >= 0 AND stress_level <= 10),
  sleep_quality integer CHECK (sleep_quality >= 1 AND sleep_quality <= 10),
  workout_rating integer CHECK (workout_rating >= 1 AND workout_rating <= 5),
  weather_conditions text,
  temperature_celsius numeric,
  humidity_percentage integer,
  wind_speed_kmh numeric,
  wind_direction integer,
  precipitation text,
  air_quality_index integer,
  indoor boolean DEFAULT false,
  gear_id text,
  location text,
  route_name text,
  city text,
  state text,
  country text,
  start_lat numeric,
  start_lng numeric,
  end_lat numeric,
  end_lng numeric,
  workout_id integer,
  notes text,
  private_notes text,
  photos ARRAY,
  videos ARRAY,
  map_polyline text,
  kudos_count integer DEFAULT 0,
  comment_count integer DEFAULT 0,
  photo_count integer DEFAULT 0,
  visibility text DEFAULT 'private'::text CHECK (visibility = ANY (ARRAY['private'::text, 'followers'::text, 'public'::text])),
  commute boolean DEFAULT false,
  trainer boolean DEFAULT false,
  race boolean DEFAULT false,
  workout_type text,
  weather_data jsonb,
  raw_data jsonb,
  laps jsonb,
  splits jsonb,
  segments jsonb,
  device_name text,
  device_manufacturer text,
  upload_source text,
  file_format text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  synced_at timestamp with time zone,
  performance_score numeric CHECK (performance_score >= 0::numeric AND performance_score <= 10::numeric),
  effort_level numeric CHECK (effort_level >= 0::numeric AND effort_level <= 10::numeric),
  recovery_needed_hours integer,
  tags ARRAY DEFAULT ARRAY[]::text[],
  activity_name text,
  duration_minutes integer,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  energy_level_before integer CHECK (energy_level_before >= 1 AND energy_level_before <= 10),
  energy_level_after integer CHECK (energy_level_after >= 1 AND energy_level_after <= 10),
  completed boolean DEFAULT true,
  quick_entry_log_id uuid,
  ai_extracted boolean DEFAULT false,
  ai_confidence numeric CHECK (ai_confidence >= 0::numeric AND ai_confidence <= 1::numeric),
  extraction_metadata jsonb DEFAULT '{}'::jsonb,
  is_duplicate boolean DEFAULT false,
  merged_into_id uuid,
  merged_from_sources ARRAY DEFAULT '{}'::text[],
  merge_count integer DEFAULT 0,
  CONSTRAINT activities_pkey PRIMARY KEY (id),
  CONSTRAINT activities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activities_merged_into_id_fkey FOREIGN KEY (merged_into_id) REFERENCES public.activities(id),
  CONSTRAINT activities_quick_entry_log_id_fkey FOREIGN KEY (quick_entry_log_id) REFERENCES public.quick_entry_logs(id)
);
CREATE TABLE public.activity_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  activity_id uuid NOT NULL,
  exercise_id uuid,
  workout_exercise_id uuid,
  order_index integer,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT activity_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT activity_exercises_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id),
  CONSTRAINT activity_exercises_workout_exercise_id_fkey FOREIGN KEY (workout_exercise_id) REFERENCES public.workout_exercises(id)
);
CREATE TABLE public.activity_merge_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  new_activity_id uuid NOT NULL,
  existing_activity_id uuid NOT NULL,
  confidence numeric NOT NULL CHECK (confidence >= 0::numeric AND confidence <= 1::numeric),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'merged'::text, 'kept_separate'::text, 'dismissed'::text])),
  user_decision text CHECK (user_decision = ANY (ARRAY['merge'::text, 'keep_both'::text, 'delete_new'::text, 'delete_existing'::text])),
  decided_at timestamp with time zone,
  system_reasoning text,
  user_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT activity_merge_requests_pkey PRIMARY KEY (id),
  CONSTRAINT activity_merge_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT activity_merge_requests_new_activity_id_fkey FOREIGN KEY (new_activity_id) REFERENCES public.activities(id),
  CONSTRAINT activity_merge_requests_existing_activity_id_fkey FOREIGN KEY (existing_activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_segments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  activity_id uuid,
  segment_type text NOT NULL CHECK (segment_type = ANY (ARRAY['lap'::text, 'interval'::text, 'set'::text, 'split'::text, 'circuit'::text, 'round'::text])),
  segment_index integer NOT NULL,
  start_time timestamp with time zone,
  elapsed_time_seconds integer,
  moving_time_seconds integer,
  distance_meters numeric,
  average_speed numeric,
  max_speed numeric,
  average_pace text,
  average_heartrate integer,
  max_heartrate integer,
  min_heartrate integer,
  exercise_name text,
  reps integer,
  weight_kg numeric,
  average_cadence numeric,
  average_power numeric,
  normalized_power numeric,
  calories integer,
  elevation_gain numeric,
  elevation_loss numeric,
  average_stroke_rate numeric,
  stroke_count integer,
  notes text,
  raw_data jsonb,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_segments_pkey PRIMARY KEY (id),
  CONSTRAINT activity_segments_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.activity_sets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  activity_exercise_id uuid NOT NULL,
  set_number integer NOT NULL,
  reps_completed integer,
  weight_lbs numeric,
  weight_kg numeric,
  rpe integer CHECK (rpe >= 1 AND rpe <= 10),
  rest_seconds integer,
  completed boolean DEFAULT true,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT activity_sets_pkey PRIMARY KEY (id),
  CONSTRAINT activity_sets_activity_exercise_id_fkey FOREIGN KEY (activity_exercise_id) REFERENCES public.activity_exercises(id)
);
CREATE TABLE public.activity_streams (
  activity_id uuid NOT NULL,
  stream_type text NOT NULL CHECK (stream_type = ANY (ARRAY['heartrate'::text, 'cadence'::text, 'power'::text, 'speed'::text, 'altitude'::text, 'distance'::text, 'temperature'::text, 'grade'::text, 'battery'::text, 'calories'::text, 'lap_time'::text, 'moving'::text])),
  data_points jsonb NOT NULL,
  data_type text CHECK (data_type = ANY (ARRAY['integer'::text, 'float'::text, 'boolean'::text, 'string'::text])),
  resolution text CHECK (resolution = ANY (ARRAY['high'::text, 'medium'::text, 'low'::text, 'raw'::text])),
  original_size integer,
  series_type text CHECK (series_type = ANY (ARRAY['time'::text, 'distance'::text])),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
  CONSTRAINT activity_streams_pkey PRIMARY KEY (activity_id, stream_type),
  CONSTRAINT activity_streams_activity_id_fkey FOREIGN KEY (activity_id) REFERENCES public.activities(id)
);
CREATE TABLE public.ai_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  messages jsonb NOT NULL DEFAULT '[]'::jsonb,
  embedding USER-DEFINED,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  context_used jsonb DEFAULT '{}'::jsonb,
  last_message_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT ai_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_generated_programs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  goals ARRAY,
  duration_weeks integer NOT NULL DEFAULT 12,
  total_days integer NOT NULL DEFAULT 84,
  start_date date,
  end_date date,
  is_active boolean DEFAULT true,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'abandoned'::text])),
  generation_prompt text,
  generation_context jsonb DEFAULT '{}'::jsonb,
  questions_answers jsonb DEFAULT '[]'::jsonb,
  ai_model text DEFAULT 'gpt-4o'::text,
  difficulty_level text CHECK (difficulty_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  primary_focus ARRAY,
  equipment_needed ARRAY,
  dietary_approach text,
  current_day integer DEFAULT 1,
  days_completed integer DEFAULT 0,
  meals_completed integer DEFAULT 0,
  workouts_completed integer DEFAULT 0,
  adherence_percentage numeric DEFAULT 100 CHECK (adherence_percentage >= 0::numeric AND adherence_percentage <= 100::numeric),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  consultation_session_id uuid,
  CONSTRAINT ai_generated_programs_pkey PRIMARY KEY (id),
  CONSTRAINT ai_generated_programs_consultation_session_id_fkey FOREIGN KEY (consultation_session_id) REFERENCES public.consultation_sessions(id),
  CONSTRAINT ai_generated_programs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ai_program_days (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  day_number integer NOT NULL CHECK (day_number >= 1 AND day_number <= 365),
  day_date date,
  day_of_week text CHECK (day_of_week = ANY (ARRAY['monday'::text, 'tuesday'::text, 'wednesday'::text, 'thursday'::text, 'friday'::text, 'saturday'::text, 'sunday'::text])),
  day_name text,
  day_focus text,
  day_notes text,
  is_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  completion_notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_program_days_pkey PRIMARY KEY (id),
  CONSTRAINT ai_program_days_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id)
);
CREATE TABLE public.ai_program_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  program_id uuid NOT NULL,
  program_day_id uuid NOT NULL,
  item_type text NOT NULL CHECK (item_type = ANY (ARRAY['meal'::text, 'workout'::text, 'rest'::text, 'note'::text])),
  item_order integer DEFAULT 0,
  meal_type text CHECK (meal_type = ANY (ARRAY['breakfast'::text, 'lunch'::text, 'dinner'::text, 'snack'::text, 'pre_workout'::text, 'post_workout'::text])),
  meal_name text,
  meal_foods jsonb DEFAULT '[]'::jsonb,
  meal_recipe text,
  meal_calories numeric,
  meal_protein_g numeric,
  meal_carbs_g numeric,
  meal_fat_g numeric,
  workout_name text,
  workout_type text CHECK (workout_type = ANY (ARRAY['strength'::text, 'cardio'::text, 'sports'::text, 'flexibility'::text, 'mobility'::text, 'active_recovery'::text])),
  workout_duration_minutes integer,
  workout_exercises jsonb DEFAULT '[]'::jsonb,
  workout_intensity text CHECK (workout_intensity = ANY (ARRAY['low'::text, 'moderate'::text, 'high'::text, 'max'::text])),
  workout_notes text,
  description text,
  notes text,
  alternatives jsonb,
  is_completed boolean DEFAULT false,
  completed_at timestamp with time zone,
  completion_notes text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_program_items_pkey PRIMARY KEY (id),
  CONSTRAINT ai_program_items_program_id_fkey FOREIGN KEY (program_id) REFERENCES public.ai_generated_programs(id),
  CONSTRAINT ai_program_items_program_day_id_fkey FOREIGN KEY (program_day_id) REFERENCES public.ai_program_days(id)
);
CREATE TABLE public.body_battery_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  starting_level integer CHECK (starting_level >= 0 AND starting_level <= 100),
  ending_level integer CHECK (ending_level >= 0 AND ending_level <= 100),
  lowest_level integer CHECK (lowest_level >= 0 AND lowest_level <= 100),
  highest_level integer CHECK (highest_level >= 0 AND highest_level <= 100),
  total_drain integer CHECK (total_drain >= 0),
  total_recharge integer CHECK (total_recharge >= 0),
  morning_energy integer CHECK (morning_energy >= 1 AND morning_energy <= 10),
  afternoon_energy integer CHECK (afternoon_energy >= 1 AND afternoon_energy <= 10),
  evening_energy integer CHECK (evening_energy >= 1 AND evening_energy <= 10),
  timeline jsonb,
  notes text CHECK (char_length(notes) <= 1000),
  source text DEFAULT 'manual'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT body_battery_logs_pkey PRIMARY KEY (id),
  CONSTRAINT body_battery_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.body_measurements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  measured_at timestamp with time zone NOT NULL DEFAULT now(),
  weight_lbs numeric,
  weight_kg numeric,
  body_fat_pct numeric,
  muscle_mass_lbs numeric,
  muscle_mass_kg numeric,
  measurements jsonb,
  source text DEFAULT 'manual'::text CHECK (source = ANY (ARRAY['manual'::text, 'scale'::text, 'dexa'::text, 'inbody'::text, 'quick_entry'::text])),
  notes text,
  trend_direction text CHECK (trend_direction = ANY (ARRAY['up'::text, 'down'::text, 'stable'::text])),
  rate_of_change_weekly numeric,
  goal_progress_pct numeric CHECK (goal_progress_pct >= 0::numeric AND goal_progress_pct <= 100::numeric),
  health_assessment text CHECK (health_assessment = ANY (ARRAY['healthy'::text, 'caution'::text, 'concern'::text])),
  tags ARRAY DEFAULT ARRAY[]::text[],
  created_at timestamp with time zone DEFAULT now(),
  quick_entry_log_id uuid,
  ai_extracted boolean DEFAULT false,
  ai_confidence numeric CHECK (ai_confidence >= 0::numeric AND ai_confidence <= 1::numeric),
  extraction_metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT body_measurements_pkey PRIMARY KEY (id),
  CONSTRAINT body_measurements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT body_measurements_quick_entry_log_id_fkey FOREIGN KEY (quick_entry_log_id) REFERENCES public.quick_entry_logs(id)
);
CREATE TABLE public.coach_conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text,
  message_count integer DEFAULT 0 CHECK (message_count >= 0),
  archived boolean DEFAULT false,
  last_message_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  consultation_session_id uuid,
  CONSTRAINT coach_conversations_pkey PRIMARY KEY (id),
  CONSTRAINT coach_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT coach_conversations_consultation_session_id_fkey FOREIGN KEY (consultation_session_id) REFERENCES public.consultation_sessions(id)
);
CREATE TABLE public.coach_message_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  message_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text, 'system'::text])),
  embedding USER-DEFINED NOT NULL,
  content_text text NOT NULL,
  embedding_model text NOT NULL DEFAULT 'sentence-transformers/all-MiniLM-L6-v2'::text,
  embedding_dimensions integer NOT NULL DEFAULT 384,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT coach_message_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT coach_message_embeddings_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.coach_messages(id),
  CONSTRAINT coach_message_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.coach_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  conversation_id uuid NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text, 'system'::text])),
  content text NOT NULL,
  context_used jsonb,
  ai_provider text CHECK (ai_provider = ANY (ARRAY['anthropic'::text, 'groq'::text, 'openai'::text, 'openrouter'::text])),
  ai_model text,
  tokens_used integer,
  cost_usd numeric,
  created_at timestamp with time zone DEFAULT now(),
  message_type text NOT NULL DEFAULT 'chat'::text CHECK (message_type = ANY (ARRAY['chat'::text, 'log_preview'::text, 'log_confirmed'::text, 'system'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  quick_entry_log_id uuid,
  is_vectorized boolean DEFAULT false,
  CONSTRAINT coach_messages_pkey PRIMARY KEY (id),
  CONSTRAINT coach_messages_quick_entry_log_id_fkey FOREIGN KEY (quick_entry_log_id) REFERENCES public.quick_entry_logs(id),
  CONSTRAINT coach_messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.coach_conversations(id),
  CONSTRAINT coach_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.consultation_extractions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  user_id uuid NOT NULL,
  extraction_category text NOT NULL CHECK (extraction_category = ANY (ARRAY['health_history'::text, 'nutrition_patterns'::text, 'training_history'::text, 'goals'::text, 'preferences'::text, 'measurements'::text, 'lifestyle'::text, 'psychology'::text])),
  extracted_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  source_message_ids ARRAY DEFAULT ARRAY[]::uuid[],
  confidence_score numeric CHECK (confidence_score >= 0::numeric AND confidence_score <= 1::numeric),
  verified boolean DEFAULT false,
  verification_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consultation_extractions_pkey PRIMARY KEY (id),
  CONSTRAINT consultation_extractions_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.consultation_sessions(id),
  CONSTRAINT consultation_extractions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.consultation_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text, 'system'::text])),
  content text NOT NULL,
  extraction_data jsonb DEFAULT '{}'::jsonb,
  extraction_confidence numeric CHECK (extraction_confidence >= 0::numeric AND extraction_confidence <= 1::numeric),
  extraction_category text CHECK (extraction_category = ANY (ARRAY['health_history'::text, 'nutrition_patterns'::text, 'training_history'::text, 'goals'::text, 'preferences'::text, 'measurements'::text, 'lifestyle'::text, 'psychology'::text])),
  ai_provider text CHECK (ai_provider = ANY (ARRAY['groq'::text, 'openrouter'::text, 'anthropic'::text, 'openai'::text, 'deepseek'::text, 'free'::text])),
  ai_model text,
  tokens_used integer DEFAULT 0,
  cost_usd numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consultation_messages_pkey PRIMARY KEY (id),
  CONSTRAINT consultation_messages_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.consultation_sessions(id),
  CONSTRAINT consultation_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.consultation_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  specialist_type text NOT NULL CHECK (specialist_type = ANY (ARRAY['unified_coach'::text, 'nutritionist'::text, 'trainer'::text, 'physiotherapist'::text, 'sports_psychologist'::text])),
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'abandoned'::text])),
  conversation_stage text CHECK (conversation_stage = ANY (ARRAY['introduction'::text, 'discovery'::text, 'health_history'::text, 'goals'::text, 'preferences'::text, 'wrap_up'::text])),
  progress_percentage numeric DEFAULT 0 CHECK (progress_percentage >= 0::numeric AND progress_percentage <= 100::numeric),
  session_metadata jsonb DEFAULT '{}'::jsonb,
  total_messages integer DEFAULT 0,
  total_extractions integer DEFAULT 0,
  total_tokens_used integer DEFAULT 0,
  total_cost_usd numeric DEFAULT 0,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  last_message_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT consultation_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT consultation_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_nutrition_summary (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  breakfast_calories numeric DEFAULT 0,
  lunch_calories numeric DEFAULT 0,
  dinner_calories numeric DEFAULT 0,
  snacks_calories numeric DEFAULT 0,
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  total_sugar_g numeric DEFAULT 0,
  total_sodium_mg numeric DEFAULT 0,
  meals_logged integer DEFAULT 0,
  foods_logged integer DEFAULT 0,
  water_ml integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT daily_nutrition_summary_pkey PRIMARY KEY (id),
  CONSTRAINT daily_nutrition_summary_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.daily_readiness (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  readiness_score integer CHECK (readiness_score >= 0 AND readiness_score <= 100),
  readiness_status text CHECK (readiness_status = ANY (ARRAY['poor'::text, 'low'::text, 'balanced'::text, 'high'::text, 'optimal'::text])),
  sleep_score integer CHECK (sleep_score >= 0 AND sleep_score <= 100),
  hrv_status text CHECK (hrv_status = ANY (ARRAY['poor'::text, 'unbalanced'::text, 'balanced'::text, 'excellent'::text])),
  resting_heart_rate integer CHECK (resting_heart_rate > 0 AND resting_heart_rate < 200),
  recovery_time_hours integer CHECK (recovery_time_hours >= 0 AND recovery_time_hours <= 168),
  energy_level integer CHECK (energy_level >= 1 AND energy_level <= 10),
  soreness_level integer CHECK (soreness_level >= 0 AND soreness_level <= 10),
  stress_level integer CHECK (stress_level >= 0 AND stress_level <= 10),
  mood text CHECK (mood = ANY (ARRAY['terrible'::text, 'bad'::text, 'okay'::text, 'good'::text, 'amazing'::text])),
  motivation_level integer CHECK (motivation_level >= 1 AND motivation_level <= 10),
  sleep_quality_rating integer CHECK (sleep_quality_rating >= 1 AND sleep_quality_rating <= 5),
  sleep_hours_estimate numeric CHECK (sleep_hours_estimate >= 0::numeric AND sleep_hours_estimate <= 24::numeric),
  acute_training_load numeric CHECK (acute_training_load >= 0::numeric),
  chronic_training_load numeric CHECK (chronic_training_load >= 0::numeric),
  load_ratio numeric CHECK (load_ratio >= 0::numeric AND load_ratio <= 3::numeric),
  training_status text CHECK (training_status = ANY (ARRAY['detraining'::text, 'maintaining'::text, 'productive'::text, 'peaking'::text, 'overreaching'::text, 'unproductive'::text])),
  source text DEFAULT 'manual'::text,
  calculation_method text CHECK (calculation_method = ANY (ARRAY['auto_garmin'::text, 'auto_calculated'::text, 'manual_full'::text, 'manual_partial'::text])),
  factors_used jsonb DEFAULT '{}'::jsonb,
  notes text CHECK (char_length(notes) <= 1000),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_readiness_pkey PRIMARY KEY (id),
  CONSTRAINT daily_readiness_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_recommendations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  recommendation_date date NOT NULL,
  recommendation_time time without time zone,
  recommendation_type text NOT NULL CHECK (recommendation_type = ANY (ARRAY['meal'::text, 'workout'::text, 'rest'::text, 'hydration'::text, 'supplement'::text, 'note'::text, 'check_in'::text])),
  content jsonb NOT NULL DEFAULT '{}'::jsonb,
  reasoning text,
  priority integer DEFAULT 3 CHECK (priority >= 1 AND priority <= 5),
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'rejected'::text, 'completed'::text, 'expired'::text])),
  based_on_data jsonb DEFAULT '{}'::jsonb,
  related_log_ids ARRAY DEFAULT ARRAY[]::uuid[],
  user_feedback text,
  feedback_rating integer CHECK (feedback_rating >= 1 AND feedback_rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  completed_at timestamp with time zone,
  CONSTRAINT daily_recommendations_pkey PRIMARY KEY (id),
  CONSTRAINT daily_recommendations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_steps_and_activity (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  total_steps integer DEFAULT 0 CHECK (total_steps >= 0),
  step_goal integer CHECK (step_goal >= 0),
  distance_meters numeric CHECK (distance_meters >= 0::numeric),
  moderate_intensity_minutes integer DEFAULT 0 CHECK (moderate_intensity_minutes >= 0),
  vigorous_intensity_minutes integer DEFAULT 0 CHECK (vigorous_intensity_minutes >= 0),
  floors_climbed integer DEFAULT 0 CHECK (floors_climbed >= 0),
  floors_goal integer CHECK (floors_goal >= 0),
  total_calories integer CHECK (total_calories >= 0),
  active_calories integer CHECK (active_calories >= 0),
  bmr_calories integer CHECK (bmr_calories >= 0),
  move_iq_events jsonb DEFAULT '[]'::jsonb,
  source text DEFAULT 'manual'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_steps_and_activity_pkey PRIMARY KEY (id),
  CONSTRAINT daily_steps_and_activity_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.food_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  last_serving_quantity numeric,
  last_serving_unit character varying,
  last_gram_quantity numeric,
  last_used_at timestamp with time zone NOT NULL DEFAULT now(),
  use_count integer DEFAULT 1,
  last_meal_category character varying,
  typical_meal_categories ARRAY,
  is_frequent boolean DEFAULT false,
  is_recent boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT food_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT food_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT food_preferences_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  food_type character varying NOT NULL DEFAULT 'ingredient'::character varying CHECK (food_type::text = ANY (ARRAY['ingredient'::character varying, 'dish'::character varying, 'branded'::character varying, 'restaurant'::character varying]::text[])),
  brand_name character varying,
  restaurant_name character varying,
  description text,
  barcode_upc character varying,
  barcode_ean character varying,
  barcode_type character varying,
  allow_gram_editing boolean NOT NULL DEFAULT true,
  serving_size numeric NOT NULL DEFAULT 100 CHECK (serving_size > 0::numeric),
  serving_unit character varying NOT NULL DEFAULT 'g'::character varying,
  household_serving_unit character varying,
  household_serving_grams numeric CHECK (household_serving_grams IS NULL OR household_serving_grams > 0::numeric),
  servings_per_container numeric,
  calories numeric NOT NULL DEFAULT 0,
  protein_g numeric NOT NULL DEFAULT 0,
  total_carbs_g numeric NOT NULL DEFAULT 0,
  total_fat_g numeric NOT NULL DEFAULT 0,
  dietary_fiber_g numeric DEFAULT 0,
  total_sugars_g numeric DEFAULT 0,
  added_sugars_g numeric DEFAULT 0,
  sugar_alcohols_g numeric DEFAULT 0,
  saturated_fat_g numeric DEFAULT 0,
  trans_fat_g numeric DEFAULT 0,
  monounsaturated_fat_g numeric DEFAULT 0,
  polyunsaturated_fat_g numeric DEFAULT 0,
  omega3_mg numeric DEFAULT 0,
  omega6_mg numeric DEFAULT 0,
  cholesterol_mg numeric DEFAULT 0,
  sodium_mg numeric DEFAULT 0,
  potassium_mg numeric DEFAULT 0,
  calcium_mg numeric DEFAULT 0,
  iron_mg numeric DEFAULT 0,
  magnesium_mg numeric DEFAULT 0,
  zinc_mg numeric DEFAULT 0,
  vitamin_a_mcg numeric DEFAULT 0,
  vitamin_c_mg numeric DEFAULT 0,
  vitamin_d_mcg numeric DEFAULT 0,
  vitamin_e_mg numeric DEFAULT 0,
  vitamin_k_mcg numeric DEFAULT 0,
  vitamin_b6_mg numeric DEFAULT 0,
  vitamin_b12_mcg numeric DEFAULT 0,
  folate_mcg numeric DEFAULT 0,
  caffeine_mg numeric DEFAULT 0,
  alcohol_g numeric DEFAULT 0,
  water_g numeric DEFAULT 0,
  allergens ARRAY,
  dietary_flags ARRAY,
  ingredients ARRAY,
  source character varying,
  external_id character varying,
  data_quality_score numeric CHECK (data_quality_score IS NULL OR data_quality_score >= 0::numeric AND data_quality_score <= 1::numeric),
  verified boolean DEFAULT false,
  verified_by uuid,
  verified_at timestamp with time zone,
  is_public boolean DEFAULT true,
  created_by uuid,
  is_recipe boolean DEFAULT false,
  popularity_score integer DEFAULT 0,
  global_use_count integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT foods_pkey PRIMARY KEY (id),
  CONSTRAINT foods_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.profiles(id),
  CONSTRAINT foods_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.hrv_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  recorded_at timestamp with time zone NOT NULL,
  hrv_rmssd_ms numeric NOT NULL CHECK (hrv_rmssd_ms >= 0::numeric AND hrv_rmssd_ms <= 300::numeric),
  hrv_sdrr_ms numeric CHECK (hrv_sdrr_ms >= 0::numeric),
  measurement_type text CHECK (measurement_type = ANY (ARRAY['sleep'::text, 'morning'::text, 'resting'::text, 'workout'::text, 'manual'::text])),
  quality_score integer CHECK (quality_score >= 0 AND quality_score <= 100),
  baseline_deviation numeric,
  status text CHECK (status = ANY (ARRAY['low'::text, 'unbalanced'::text, 'balanced'::text, 'high'::text])),
  source text DEFAULT 'manual'::text,
  measurement_device text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT hrv_logs_pkey PRIMARY KEY (id),
  CONSTRAINT hrv_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.integrations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  provider text NOT NULL CHECK (provider = ANY (ARRAY['strava'::text, 'garmin'::text, 'apple_health'::text, 'google_fit'::text, 'fitbit'::text, 'polar'::text, 'whoop'::text])),
  is_active boolean DEFAULT true,
  connected_at timestamp with time zone DEFAULT now(),
  last_sync_at timestamp with time zone,
  sync_enabled boolean DEFAULT true,
  provider_user_id text,
  provider_email text,
  access_token text,
  refresh_token text,
  token_expires_at timestamp with time zone,
  scope text,
  sync_settings jsonb DEFAULT '{"sync_hr": true, "auto_sync": true, "sync_sleep": false, "sync_activities": true}'::jsonb,
  last_sync_status text CHECK (last_sync_status = ANY (ARRAY['success'::text, 'failed'::text, 'partial'::text])),
  last_sync_error text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT integrations_pkey PRIMARY KEY (id),
  CONSTRAINT integrations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.meal_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  meal_id uuid NOT NULL,
  food_id uuid NOT NULL,
  serving_quantity numeric NOT NULL CHECK (serving_quantity > 0::numeric),
  serving_unit character varying,
  gram_quantity numeric NOT NULL CHECK (gram_quantity > 0::numeric),
  last_edited_field character varying NOT NULL CHECK (last_edited_field::text = ANY (ARRAY['serving'::character varying, 'grams'::character varying]::text[])),
  calories numeric NOT NULL DEFAULT 0,
  protein_g numeric NOT NULL DEFAULT 0,
  carbs_g numeric NOT NULL DEFAULT 0,
  fat_g numeric NOT NULL DEFAULT 0,
  fiber_g numeric DEFAULT 0,
  sugar_g numeric DEFAULT 0,
  sodium_mg numeric DEFAULT 0,
  display_order integer DEFAULT 0,
  added_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_foods_meal_id_fkey FOREIGN KEY (meal_id) REFERENCES public.meals(id),
  CONSTRAINT meal_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_template_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  template_id uuid NOT NULL,
  food_id uuid NOT NULL,
  serving_quantity numeric NOT NULL,
  serving_unit character varying,
  gram_quantity numeric NOT NULL,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_template_foods_pkey PRIMARY KEY (id),
  CONSTRAINT meal_template_foods_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.meal_templates(id),
  CONSTRAINT meal_template_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.meal_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  category character varying,
  tags ARRAY,
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  use_count integer DEFAULT 0,
  last_used_at timestamp with time zone,
  is_favorite boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meal_templates_pkey PRIMARY KEY (id),
  CONSTRAINT meal_templates_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.meals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  name character varying,
  category character varying NOT NULL CHECK (category::text = ANY (ARRAY['breakfast'::character varying, 'lunch'::character varying, 'dinner'::character varying, 'snack'::character varying, 'other'::character varying]::text[])),
  logged_at timestamp with time zone NOT NULL,
  notes text,
  created_from_template_id uuid,
  copied_from_date date,
  total_calories numeric DEFAULT 0,
  total_protein_g numeric DEFAULT 0,
  total_carbs_g numeric DEFAULT 0,
  total_fat_g numeric DEFAULT 0,
  total_fiber_g numeric DEFAULT 0,
  total_sugar_g numeric DEFAULT 0,
  total_sodium_mg numeric DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT meals_pkey PRIMARY KEY (id),
  CONSTRAINT meals_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT meals_created_from_template_id_fkey FOREIGN KEY (created_from_template_id) REFERENCES public.meal_templates(id)
);
CREATE TABLE public.multimodal_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  data_type text NOT NULL CHECK (data_type = ANY (ARRAY['text'::text, 'image'::text, 'audio'::text, 'video'::text, 'pdf'::text, 'structured'::text, 'mixed'::text])),
  content_text text,
  embedding USER-DEFINED NOT NULL,
  metadata jsonb DEFAULT '{}'::jsonb,
  source_type text NOT NULL CHECK (source_type = ANY (ARRAY['meal'::text, 'meal_log'::text, 'meal_photo'::text, 'workout'::text, 'workout_log'::text, 'workout_photo'::text, 'workout_video'::text, 'activity'::text, 'activity_photo'::text, 'activity_gpx'::text, 'goal'::text, 'user_goal'::text, 'profile'::text, 'user_profile'::text, 'coach_message'::text, 'conversation'::text, 'program'::text, 'ai_program'::text, 'voice_note'::text, 'quick_entry'::text, 'food_label'::text, 'nutrition_label'::text, 'body_photo'::text, 'progress_photo'::text, 'other'::text])),
  source_id uuid,
  storage_url text,
  storage_bucket text CHECK (storage_bucket = ANY (ARRAY['user-images'::text, 'user-audio'::text, 'user-videos'::text, 'user-documents'::text, 'user-photos'::text])),
  file_name text,
  file_size_bytes bigint,
  mime_type text,
  embedding_model text NOT NULL DEFAULT 'all-MiniLM-L6-v2'::text,
  embedding_dimensions integer NOT NULL DEFAULT 384,
  confidence_score numeric CHECK (confidence_score >= 0::numeric AND confidence_score <= 1::numeric),
  processing_status text DEFAULT 'completed'::text CHECK (processing_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  processing_error text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT multimodal_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT multimodal_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.nutrition_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_name text NOT NULL DEFAULT 'My Nutrition Goals'::text,
  goal_type text NOT NULL DEFAULT 'maintenance'::text CHECK (goal_type = ANY (ARRAY['cutting'::text, 'bulking'::text, 'maintenance'::text, 'performance'::text, 'custom'::text])),
  is_active boolean NOT NULL DEFAULT true,
  daily_calories integer NOT NULL DEFAULT 2000 CHECK (daily_calories >= 1000 AND daily_calories <= 10000),
  daily_protein_g integer NOT NULL DEFAULT 150 CHECK (daily_protein_g >= 50 AND daily_protein_g <= 500),
  daily_carbs_g integer NOT NULL DEFAULT 200 CHECK (daily_carbs_g >= 50 AND daily_carbs_g <= 800),
  daily_fat_g integer NOT NULL DEFAULT 65 CHECK (daily_fat_g >= 20 AND daily_fat_g <= 300),
  daily_fiber_g integer DEFAULT 30 CHECK (daily_fiber_g >= 10 AND daily_fiber_g <= 100),
  daily_sugar_limit_g integer DEFAULT 50 CHECK (daily_sugar_limit_g >= 0 AND daily_sugar_limit_g <= 200),
  daily_sodium_limit_mg integer DEFAULT 2300 CHECK (daily_sodium_limit_mg >= 500 AND daily_sodium_limit_mg <= 5000),
  daily_water_ml integer DEFAULT 2500 CHECK (daily_water_ml >= 1000 AND daily_water_ml <= 10000),
  daily_vitamin_a_mcg numeric CHECK (daily_vitamin_a_mcg IS NULL OR daily_vitamin_a_mcg >= 0::numeric AND daily_vitamin_a_mcg <= 10000::numeric),
  daily_vitamin_c_mg numeric CHECK (daily_vitamin_c_mg IS NULL OR daily_vitamin_c_mg >= 0::numeric AND daily_vitamin_c_mg <= 2000::numeric),
  daily_vitamin_d_mcg numeric CHECK (daily_vitamin_d_mcg IS NULL OR daily_vitamin_d_mcg >= 0::numeric AND daily_vitamin_d_mcg <= 200::numeric),
  daily_vitamin_e_mg numeric CHECK (daily_vitamin_e_mg IS NULL OR daily_vitamin_e_mg >= 0::numeric AND daily_vitamin_e_mg <= 1000::numeric),
  daily_vitamin_k_mcg numeric CHECK (daily_vitamin_k_mcg IS NULL OR daily_vitamin_k_mcg >= 0::numeric AND daily_vitamin_k_mcg <= 1000::numeric),
  daily_vitamin_b12_mcg numeric CHECK (daily_vitamin_b12_mcg IS NULL OR daily_vitamin_b12_mcg >= 0::numeric AND daily_vitamin_b12_mcg <= 100::numeric),
  daily_folate_mcg numeric CHECK (daily_folate_mcg IS NULL OR daily_folate_mcg >= 0::numeric AND daily_folate_mcg <= 1000::numeric),
  daily_calcium_mg numeric CHECK (daily_calcium_mg IS NULL OR daily_calcium_mg >= 0::numeric AND daily_calcium_mg <= 3000::numeric),
  daily_iron_mg numeric CHECK (daily_iron_mg IS NULL OR daily_iron_mg >= 0::numeric AND daily_iron_mg <= 50::numeric),
  daily_magnesium_mg numeric CHECK (daily_magnesium_mg IS NULL OR daily_magnesium_mg >= 0::numeric AND daily_magnesium_mg <= 1000::numeric),
  daily_potassium_mg numeric CHECK (daily_potassium_mg IS NULL OR daily_potassium_mg >= 0::numeric AND daily_potassium_mg <= 10000::numeric),
  daily_zinc_mg numeric CHECK (daily_zinc_mg IS NULL OR daily_zinc_mg >= 0::numeric AND daily_zinc_mg <= 100::numeric),
  track_micronutrients boolean DEFAULT false,
  auto_adjust_goals boolean DEFAULT false,
  goal_notes text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  activated_at timestamp with time zone,
  CONSTRAINT nutrition_goals_pkey PRIMARY KEY (id),
  CONSTRAINT nutrition_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text,
  goal text CHECK (goal = ANY (ARRAY['build_muscle'::text, 'lose_weight'::text, 'gain_strength'::text])),
  onboarding_completed boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  goals_embedding USER-DEFINED,
  about_me text,
  experience_level USER-DEFINED DEFAULT 'beginner'::experience_level,
  fitness_goals text,
  preferred_activities ARRAY,
  motivation_factors ARRAY,
  physical_limitations ARRAY,
  available_equipment ARRAY,
  training_frequency text,
  session_duration text,
  dietary_preferences text,
  notification_preferences jsonb DEFAULT '{}'::jsonb,
  privacy_settings jsonb DEFAULT '{}'::jsonb,
  age integer CHECK (age >= 13 AND age <= 120),
  location text,
  weekly_hours numeric CHECK (weekly_hours >= 0::numeric AND weekly_hours <= 40::numeric),
  primary_goal text,
  focus_areas ARRAY,
  health_conditions text,
  equipment_access text,
  preferred_workout_time text,
  strengths text,
  areas_for_improvement text,
  timezone text DEFAULT 'UTC'::text,
  communication_preferences jsonb DEFAULT '{}'::jsonb,
  consultation_onboarding_completed boolean DEFAULT false,
  estimated_tdee integer,
  bmr integer,
  activity_multiplier numeric DEFAULT 1.2,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.quick_entry_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  quick_entry_log_id uuid NOT NULL,
  user_id uuid NOT NULL,
  embedding_type text NOT NULL CHECK (embedding_type = ANY (ARRAY['text'::text, 'image'::text, 'audio'::text, 'multimodal'::text, 'combined'::text])),
  embedding USER-DEFINED NOT NULL,
  content_text text NOT NULL,
  content_summary text,
  metadata jsonb DEFAULT '{}'::jsonb,
  source_classification text,
  embedding_model text NOT NULL DEFAULT 'sentence-transformers/all-MiniLM-L6-v2'::text,
  embedding_dimensions integer NOT NULL DEFAULT 384,
  content_hash text NOT NULL,
  is_active boolean DEFAULT true,
  logged_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quick_entry_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT quick_entry_embeddings_quick_entry_log_id_fkey FOREIGN KEY (quick_entry_log_id) REFERENCES public.quick_entry_logs(id),
  CONSTRAINT quick_entry_embeddings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.quick_entry_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  input_type text NOT NULL CHECK (input_type = ANY (ARRAY['text'::text, 'voice'::text, 'image'::text, 'multimodal'::text, 'pdf'::text])),
  input_modalities ARRAY NOT NULL DEFAULT ARRAY[]::text[],
  raw_text text,
  raw_transcription text,
  image_urls ARRAY DEFAULT ARRAY[]::text[],
  audio_url text,
  pdf_url text,
  storage_bucket text CHECK (storage_bucket = ANY (ARRAY['user-images'::text, 'user-audio'::text, 'user-videos'::text, 'user-documents'::text])),
  file_metadata jsonb DEFAULT '{}'::jsonb,
  ai_provider text NOT NULL CHECK (ai_provider = ANY (ARRAY['groq'::text, 'openrouter'::text, 'anthropic'::text, 'openai'::text, 'local'::text, 'free'::text])),
  ai_model text NOT NULL,
  ai_cost_usd numeric DEFAULT 0,
  tokens_used integer DEFAULT 0,
  processing_duration_ms integer,
  ai_classification text CHECK (ai_classification = ANY (ARRAY['meal'::text, 'workout'::text, 'body_measurement'::text, 'activity'::text, 'goal'::text, 'note'::text, 'mixed'::text, 'unknown'::text])),
  ai_extracted_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  ai_confidence_score numeric CHECK (ai_confidence_score >= 0::numeric AND ai_confidence_score <= 1::numeric),
  ai_raw_response text,
  contains_meal boolean DEFAULT false,
  contains_workout boolean DEFAULT false,
  contains_body_measurement boolean DEFAULT false,
  contains_activity boolean DEFAULT false,
  contains_goal boolean DEFAULT false,
  contains_note boolean DEFAULT false,
  meal_log_ids ARRAY DEFAULT ARRAY[]::uuid[],
  workout_log_ids ARRAY DEFAULT ARRAY[]::uuid[],
  body_measurement_ids ARRAY DEFAULT ARRAY[]::uuid[],
  activity_ids ARRAY DEFAULT ARRAY[]::uuid[],
  logged_at timestamp with time zone NOT NULL DEFAULT now(),
  timezone text DEFAULT 'UTC'::text,
  location_lat numeric,
  location_lng numeric,
  processing_status text NOT NULL DEFAULT 'pending'::text CHECK (processing_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'partial'::text])),
  processing_error text,
  retry_count integer DEFAULT 0,
  embedding_generated boolean DEFAULT false,
  embedding_id uuid,
  auto_tags ARRAY DEFAULT ARRAY[]::text[],
  user_tags ARRAY DEFAULT ARRAY[]::text[],
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quick_entry_logs_pkey PRIMARY KEY (id),
  CONSTRAINT quick_entry_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.quick_entry_stats (
  user_id uuid NOT NULL,
  total_entries integer DEFAULT 0,
  text_entries integer DEFAULT 0,
  voice_entries integer DEFAULT 0,
  image_entries integer DEFAULT 0,
  multimodal_entries integer DEFAULT 0,
  meal_extractions integer DEFAULT 0,
  workout_extractions integer DEFAULT 0,
  body_measurement_extractions integer DEFAULT 0,
  failed_extractions integer DEFAULT 0,
  total_ai_cost_usd numeric DEFAULT 0,
  total_tokens_used bigint DEFAULT 0,
  avg_processing_time_ms integer,
  avg_confidence_score numeric,
  first_entry_at timestamp with time zone,
  last_entry_at timestamp with time zone,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quick_entry_stats_pkey PRIMARY KEY (user_id),
  CONSTRAINT quick_entry_stats_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.rate_limits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  endpoint text NOT NULL,
  requests integer DEFAULT 0,
  window_seconds integer DEFAULT 86400,
  reset_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT rate_limits_pkey PRIMARY KEY (id),
  CONSTRAINT rate_limits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.sleep_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  sleep_date date NOT NULL,
  sleep_start timestamp with time zone NOT NULL,
  sleep_end timestamp with time zone NOT NULL,
  total_sleep_minutes integer CHECK (total_sleep_minutes >= 0 AND total_sleep_minutes <= 1440),
  deep_sleep_minutes integer CHECK (deep_sleep_minutes >= 0),
  light_sleep_minutes integer CHECK (light_sleep_minutes >= 0),
  rem_sleep_minutes integer CHECK (rem_sleep_minutes >= 0),
  awake_minutes integer CHECK (awake_minutes >= 0),
  sleep_score integer CHECK (sleep_score >= 0 AND sleep_score <= 100),
  sleep_quality text CHECK (sleep_quality = ANY (ARRAY['poor'::text, 'fair'::text, 'good'::text, 'excellent'::text])),
  interruptions integer DEFAULT 0 CHECK (interruptions >= 0),
  restlessness_level integer CHECK (restlessness_level >= 0 AND restlessness_level <= 10),
  avg_hrv_ms numeric CHECK (avg_hrv_ms >= 0::numeric),
  avg_heart_rate integer CHECK (avg_heart_rate > 0 AND avg_heart_rate < 200),
  lowest_heart_rate integer CHECK (lowest_heart_rate > 0 AND lowest_heart_rate < 200),
  avg_respiration_rate numeric CHECK (avg_respiration_rate >= 0::numeric AND avg_respiration_rate <= 60::numeric),
  avg_spo2_percentage numeric CHECK (avg_spo2_percentage >= 0::numeric AND avg_spo2_percentage <= 100::numeric),
  source text DEFAULT 'manual'::text CHECK (source = ANY (ARRAY['garmin'::text, 'apple'::text, 'fitbit'::text, 'whoop'::text, 'oura'::text, 'manual'::text])),
  entry_method text DEFAULT 'form'::text CHECK (entry_method = ANY (ARRAY['auto_sync'::text, 'form'::text, 'quick_entry'::text, 'voice'::text])),
  notes text CHECK (char_length(notes) <= 1000),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT sleep_logs_pkey PRIMARY KEY (id),
  CONSTRAINT sleep_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.stress_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  avg_stress_level integer CHECK (avg_stress_level >= 0 AND avg_stress_level <= 100),
  max_stress_level integer CHECK (max_stress_level >= 0 AND max_stress_level <= 100),
  rest_stress_level integer CHECK (rest_stress_level >= 0 AND rest_stress_level <= 100),
  morning_stress integer CHECK (morning_stress >= 0 AND morning_stress <= 10),
  afternoon_stress integer CHECK (afternoon_stress >= 0 AND afternoon_stress <= 10),
  evening_stress integer CHECK (evening_stress >= 0 AND evening_stress <= 10),
  rest_minutes integer DEFAULT 0 CHECK (rest_minutes >= 0),
  low_stress_minutes integer DEFAULT 0 CHECK (low_stress_minutes >= 0),
  medium_stress_minutes integer DEFAULT 0 CHECK (medium_stress_minutes >= 0),
  high_stress_minutes integer DEFAULT 0 CHECK (high_stress_minutes >= 0),
  stress_events jsonb DEFAULT '[]'::jsonb,
  notes text CHECK (char_length(notes) <= 1000),
  source text DEFAULT 'manual'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT stress_logs_pkey PRIMARY KEY (id),
  CONSTRAINT stress_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.training_load_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  acute_load numeric CHECK (acute_load >= 0::numeric),
  chronic_load numeric CHECK (chronic_load >= 0::numeric),
  load_ratio numeric CHECK (load_ratio >= 0::numeric AND load_ratio <= 3::numeric),
  load_focus text CHECK (load_focus = ANY (ARRAY['anaerobic'::text, 'high_aerobic'::text, 'low_aerobic'::text, 'mixed'::text])),
  load_breakdown jsonb,
  training_status text CHECK (training_status = ANY (ARRAY['detraining'::text, 'maintaining'::text, 'productive'::text, 'peaking'::text, 'overreaching'::text, 'unproductive'::text])),
  training_effect_label text,
  vo2max_estimate numeric CHECK (vo2max_estimate >= 0::numeric AND vo2max_estimate <= 100::numeric),
  fitness_age integer CHECK (fitness_age >= 10 AND fitness_age <= 120),
  lactate_threshold_hr integer CHECK (lactate_threshold_hr > 0 AND lactate_threshold_hr < 220),
  lactate_threshold_pace numeric,
  source text DEFAULT 'calculated'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT training_load_history_pkey PRIMARY KEY (id),
  CONSTRAINT training_load_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_consultation_profiles (
  user_id uuid NOT NULL,
  speaking_style text DEFAULT 'casual'::text CHECK (speaking_style = ANY (ARRAY['formal'::text, 'casual'::text, 'motivational'::text, 'technical'::text, 'nurturing'::text])),
  communication_preferences jsonb DEFAULT '{"tone_preference": "encouraging", "language_complexity": "moderate", "prefers_visual_aids": true, "prefers_detailed_explanations": false}'::jsonb,
  consultation_history_summary text,
  key_learnings jsonb DEFAULT '{}'::jsonb,
  total_consultations integer DEFAULT 0,
  completed_consultations integer DEFAULT 0,
  average_session_duration_minutes integer,
  first_consultation_at timestamp with time zone,
  last_consultation_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_consultation_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_consultation_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_favorite_foods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  favorited_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_favorite_foods_pkey PRIMARY KEY (id),
  CONSTRAINT user_favorite_foods_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_favorite_foods_food_id_fkey FOREIGN KEY (food_id) REFERENCES public.foods(id)
);
CREATE TABLE public.user_food_preferences (
  user_id uuid NOT NULL,
  food_id uuid NOT NULL,
  typical_serving_grams numeric NOT NULL CHECK (typical_serving_grams > 0::numeric),
  typical_serving_name text,
  use_count integer DEFAULT 1 CHECK (use_count > 0),
  last_used_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_food_preferences_pkey PRIMARY KEY (user_id, food_id),
  CONSTRAINT user_food_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  goal_type USER-DEFINED NOT NULL,
  goal_description text NOT NULL,
  target_value numeric,
  target_unit text,
  target_date date,
  priority integer DEFAULT 1 CHECK (priority >= 1 AND priority <= 5),
  status USER-DEFINED DEFAULT 'active'::goal_status,
  is_active boolean DEFAULT true,
  progress_value numeric DEFAULT 0,
  progress_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT user_goals_pkey PRIMARY KEY (id),
  CONSTRAINT user_goals_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_onboarding (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  primary_goal text NOT NULL CHECK (primary_goal = ANY (ARRAY['build_muscle'::text, 'lose_fat'::text, 'improve_endurance'::text, 'increase_strength'::text, 'sport_performance'::text, 'general_health'::text, 'rehab_recovery'::text])),
  user_persona text NOT NULL CHECK (user_persona = ANY (ARRAY['strength_athlete'::text, 'bodybuilder'::text, 'endurance_runner'::text, 'triathlete'::text, 'crossfit_athlete'::text, 'team_sport_athlete'::text, 'general_fitness'::text, 'beginner_recovery'::text])),
  current_activity_level text NOT NULL CHECK (current_activity_level = ANY (ARRAY['sedentary'::text, 'lightly_active'::text, 'moderately_active'::text, 'very_active'::text])),
  desired_training_frequency integer NOT NULL CHECK (desired_training_frequency >= 3 AND desired_training_frequency <= 7),
  biological_sex text NOT NULL CHECK (biological_sex = ANY (ARRAY['male'::text, 'female'::text])),
  age integer NOT NULL CHECK (age >= 18 AND age <= 80),
  current_weight_kg numeric NOT NULL CHECK (current_weight_kg > 0::numeric),
  height_cm numeric NOT NULL CHECK (height_cm > 0::numeric),
  daily_meal_preference integer NOT NULL CHECK (daily_meal_preference = ANY (ARRAY[2, 3, 4, 5, 6])),
  training_time_preferences ARRAY DEFAULT ARRAY[]::text[],
  dietary_restrictions ARRAY DEFAULT ARRAY[]::text[],
  equipment_access ARRAY DEFAULT ARRAY[]::text[],
  injury_limitations ARRAY DEFAULT ARRAY[]::text[],
  experience_level text NOT NULL CHECK (experience_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text, 'expert'::text])),
  completed boolean NOT NULL DEFAULT false,
  completed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  city text,
  location_permission boolean DEFAULT false,
  facility_access ARRAY DEFAULT ARRAY[]::text[],
  daily_calorie_target integer,
  daily_protein_target_g integer,
  daily_carbs_target_g integer,
  daily_fat_target_g integer,
  goal_weight_kg numeric,
  goal_body_fat_pct numeric,
  estimated_tdee integer,
  goal_type text CHECK (goal_type = ANY (ARRAY['cut'::text, 'bulk'::text, 'maintain'::text, 'recomp'::text])),
  CONSTRAINT user_onboarding_pkey PRIMARY KEY (id),
  CONSTRAINT user_onboarding_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  unit_system text DEFAULT 'metric'::text CHECK (unit_system = ANY (ARRAY['metric'::text, 'imperial'::text])),
  default_activity_view text DEFAULT 'list'::text CHECK (default_activity_view = ANY (ARRAY['list'::text, 'grid'::text, 'calendar'::text])),
  activities_per_page integer DEFAULT 20 CHECK (activities_per_page >= 10 AND activities_per_page <= 100),
  activities_public boolean DEFAULT false,
  share_stats boolean DEFAULT false,
  workout_reminders boolean DEFAULT true,
  achievement_notifications boolean DEFAULT true,
  weekly_summary boolean DEFAULT true,
  auto_pause boolean DEFAULT true,
  countdown_seconds integer DEFAULT 3,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  full_name text,
  email text UNIQUE,
  age integer CHECK (age >= 13 AND age <= 120),
  biological_sex text CHECK (biological_sex = ANY (ARRAY['male'::text, 'female'::text, 'other'::text])),
  height_cm numeric CHECK (height_cm > 0::numeric AND height_cm < 300::numeric),
  current_weight_kg numeric CHECK (current_weight_kg > 0::numeric AND current_weight_kg < 500::numeric),
  goal_weight_kg numeric,
  primary_goal text CHECK (primary_goal = ANY (ARRAY['build_muscle'::text, 'lose_fat'::text, 'improve_endurance'::text, 'increase_strength'::text, 'sport_performance'::text, 'general_health'::text])),
  experience_level text CHECK (experience_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text])),
  training_frequency integer CHECK (training_frequency >= 0 AND training_frequency <= 7),
  available_equipment ARRAY DEFAULT ARRAY[]::text[],
  dietary_restrictions ARRAY DEFAULT ARRAY[]::text[],
  injury_limitations ARRAY DEFAULT ARRAY[]::text[],
  daily_calorie_target integer,
  daily_protein_target_g integer,
  daily_carbs_target_g integer,
  daily_fat_target_g integer,
  settings jsonb DEFAULT '{"privacy": {"share_stats": false, "activities_public": false}, "timezone": "UTC", "unit_system": "metric", "workout_reminders": true, "auto_sync_activities": true, "notifications_enabled": true, "preferred_workout_time": null}'::jsonb,
  onboarding_completed boolean DEFAULT false,
  onboarding_data jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_active_at timestamp with time zone,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.webhook_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source text NOT NULL,
  event_type text NOT NULL,
  object_type text,
  object_id text,
  athlete_id bigint,
  payload jsonb,
  processed boolean DEFAULT false,
  processed_at timestamp with time zone,
  error text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT webhook_events_pkey PRIMARY KEY (id)
);
CREATE TABLE public.workout_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_id integer NOT NULL,
  exercise_id uuid,
  order_index integer NOT NULL,
  suggested_sets integer,
  suggested_reps text,
  suggested_weight_type text,
  suggested_weight_percentage numeric,
  suggested_weight_lbs numeric,
  rest_seconds integer,
  notes text,
  technique_cues ARRAY,
  superset_group integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_exercises_pkey PRIMARY KEY (id)
);
